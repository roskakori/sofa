/*
 * sofa.h -- exported symbols
 *
 * Automatically generated by `make_export_header'. Do not modify!
 */

#ifndef EXPORT_SOFA_H
#define EXPORT_SOFA_H

void sofa_assert(int expression, char *expression_text, char *assertion_description, char *file, int line);
EIF_INTEGER dos_error(void);
void dos_set_error(EIF_INTEGER code);
EIF_POINTER dos_error_description(EIF_INTEGER code);
void dos_delay(EIF_INTEGER ticks);
EIF_POINTER dos_pattern_make(EIF_POINTER source, EIF_BOOLEAN case_sensitive);
void dos_pattern_dispose(EIF_POINTER context_pointer);
EIF_BOOLEAN dos_pattern_matches(EIF_POINTER context_pointer, EIF_POINTER some_pointer);
EIF_BOOLEAN dos_pattern_has_wild_card(EIF_POINTER context_pointer);
void readargs_context_dispose(EIF_POINTER context_pointer);
EIF_POINTER readargs_context_make(EIF_POINTER pohja, EIF_INTEGER count);
EIF_BOOLEAN readargs_parse_from_cli(EIF_POINTER context_pointer, EIF_POINTER help, EIF_BOOLEAN prompt);
EIF_BOOLEAN readargs_parse_from_string(EIF_POINTER context_pointer, EIF_POINTER help, EIF_BOOLEAN prompt, EIF_POINTER source);
EIF_POINTER readargs_item_as_string(EIF_POINTER context, EIF_INTEGER index);
EIF_POINTER readargs_item_as_multiple_string(EIF_POINTER context, EIF_INTEGER index, EIF_INTEGER at);
EIF_BOOLEAN readargs_item_as_boolean(EIF_POINTER context, EIF_INTEGER index);
EIF_INTEGER readargs_item_as_integer(EIF_POINTER context, EIF_INTEGER index, EIF_INTEGER default_value);
void file_info_dispose(void *file_info);
EIF_POINTER file_info_name(EIF_POINTER info);
EIF_BOOLEAN file_info_is_directory(EIF_POINTER info);
EIF_POINTER file_info_comment(EIF_POINTER info);
EIF_INTEGER file_info_size(EIF_POINTER info);
EIF_INTEGER file_info_block_count(EIF_POINTER info);
EIF_INTEGER file_info_user(EIF_POINTER info);
EIF_INTEGER file_info_group(EIF_POINTER info);
void exec_forbid(void);
void exec_permit(void);
EIF_INTEGER exec_task_id(void);
EIF_BOOLEAN exec_has_port(EIF_POINTER name);
EIF_INTEGER exec_last_wait_result(void);
void exec_wait(EIF_INTEGER mask);
void exec_flush_cpu_cache(void);
EIF_INTEGER exec_memory_available(void);
EIF_INTEGER exec_largest_memory_available(void);
void exec_flush_memory(void);
EIF_POINTER open_library(EIF_POINTER name, EIF_INTEGER version);
void close_library(EIF_POINTER library);
EIF_INTEGER library_version(EIF_POINTER library);
EIF_POINTER sofa_pool_handle(void);
void resource_tracking_make(void);
struct tracked_resource_kind * resource_kind_make(char *name, void (*dispose) (void *resource));
void resource_kind_dispose(struct tracked_resource_kind *some);
struct tracked_pool * tracked_pool_make(void);
void tracked_pool_dispose(struct tracked_pool *pool);
struct tracked_resource * tracked_resource_make(struct tracked_pool *pool, void *resource, struct tracked_resource_kind *kind);
struct tracked_resource * tracked_sofa_resource_make(void *resource, struct tracked_resource_kind *kind);
void tracked_resource_dispose_by_node(struct tracked_pool *pool, void *some_resource_node);
void tracked_resource_dispose_by_resource(struct tracked_pool *pool, void *some_resource);
extern struct tracked_resource_kind *port_kind;
extern struct tracked_resource_kind *window_kind;
extern struct tracked_resource_kind *library_kind;
extern struct tracked_resource_kind *pool_kind;
extern struct tracked_resource_kind *file_info_kind;
EIF_BOOLEAN basic_resource_kinds_make(void);
extern struct tracked_resource_kind *rexx_server_kind;
EIF_POINTER rexx_client_last_result(void);
void rexx_client_dispose_last_result(void);
EIF_INTEGER rexx_client_send_command(char *portname, char *command);
EIF_POINTER rexx_server_make(EIF_POINTER base_name, EIF_POINTER suffix);
void rexx_server_close(EIF_POINTER context);
EIF_INTEGER rexx_server_signal_mask(EIF_POINTER context);
EIF_POINTER rexx_server_name(EIF_POINTER context);
EIF_BOOLEAN rexx_server_command(EIF_POINTER context, EIF_POINTER command);
EIF_BOOLEAN rexx_server_script(EIF_POINTER context, EIF_POINTER script);
EIF_POINTER rexx_server_get_message(EIF_POINTER context);
EIF_BOOLEAN rexx_server_is_message_in_error(EIF_POINTER message);
void rexx_server_reply_message(EIF_POINTER context, EIF_POINTER message, EIF_POINTER result, EIF_INTEGER error);
EIF_BOOLEAN rexx_server_set_last_error(EIF_POINTER context, EIF_POINTER message, EIF_POINTER description);
void rexx_server_wait(EIF_POINTER context);
EIF_POINTER rexx_server_item(EIF_POINTER message);
EIF_BOOLEAN rexx_make(void);
EIF_INTEGER rexx_library_version(void);
EIF_INTEGER pointer_to_integer(EIF_POINTER value);
EIF_POINTER integer_to_pointer(EIF_INTEGER value);
char * clone_string(char *some);
void *cmalloc(size_t size);
extern struct IntuitionBase *IntuitionBase;
void sofa_die_screaming(EIF_POINTER message);

#endif /* EXPORT_SOFA_H */
